import glob
import json
import os
from datetime import datetime
from analyze_sober_reviews import find_duplicate_improvements, generate_improvement_proposal
from telegram_sender import send_improvements_to_telegram

def get_latest_file(pattern):
    files = glob.glob(os.path.join('output', pattern))
    if not files:
        print(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –º–∞—Å–∫–µ: {pattern}')
        return None
    files.sort(key=os.path.getctime, reverse=True)
    return os.path.basename(files[0])

def main():
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    final_recommendations_file = get_latest_file('final_recommendations_*.json')
    if not final_recommendations_file:
        raise FileNotFoundError('–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!')

    print(f'–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏: {final_recommendations_file}')
    with open(os.path.join('output', final_recommendations_file), 'r', encoding='utf-8') as f:
        recommendations = json.load(f)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º (–Ω–µ –±–∞–≥–∏)
    improvements = []
    
    for priority_level in ['high_priority_recommendations', 'medium_priority_recommendations', 'low_priority_recommendations']:
        if priority_level in recommendations:
            for rec in recommendations[priority_level]:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞–µ–º –±–∞–≥–∏
                if rec.get('category') != 'bug_fixes' and 'bug' not in rec.get('category', ''):
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–∞–º–æ–º —É–ª—É—á—à–µ–Ω–∏–∏
                    if 'priority' not in rec:
                        if 'high' in priority_level:
                            rec['priority'] = 'high'
                        elif 'medium' in priority_level:
                            rec['priority'] = 'medium'
                        else:
                            rec['priority'] = 'low'
                    improvements.append(rec)

    print(f'–ù–∞–π–¥–µ–Ω–æ {len(improvements)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º')
    
    if not improvements:
        print('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    print('–ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...')
    unique_improvements = find_duplicate_improvements(improvements)
    print(f'–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Å—Ç–∞–ª–æ—Å—å {len(unique_improvements)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
    print('–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏...')
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ JSON-—Ñ–∞–π–ª
    unique_improvements_file = os.path.join('output', f'unique_improvements_{timestamp}.json')
    with open(unique_improvements_file, 'w', encoding='utf-8') as f:
        json.dump(unique_improvements, f, ensure_ascii=False, indent=2)
    print(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {unique_improvements_file}')
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
    improvement_proposals = []
    for i, imp in enumerate(unique_improvements, 1):
        print(f'–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è {i} –∏–∑ {len(unique_improvements)}...')
        proposal = generate_improvement_proposal(imp)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        imp_title = imp.get('title', f'improvement_{i}').replace(' ', '_').lower()
        proposal_file = os.path.join('output', f'improvement_proposal_{imp_title}_{timestamp}.md')
        with open(proposal_file, 'w', encoding='utf-8') as f:
            f.write(proposal)
        print(f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {proposal_file}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        improvement_proposals.append({
            'improvement': imp,
            'proposal': proposal,
            'file': proposal_file
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    all_proposals_file = os.path.join('output', f'all_improvement_proposals_{timestamp}.md')
    with open(all_proposals_file, 'w', encoding='utf-8') as f:
        for i, item in enumerate(improvement_proposals, 1):
            f.write(f'# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é #{i}\n\n')
            f.write(item['proposal'])
            f.write('\n\n---\n\n')
    
    print(f'–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {all_proposals_file}')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ Telegram
    print(f"\nüì± –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º –≤ Telegram...")
    try:
        success = send_improvements_to_telegram(timestamp)
        if success:
            print("‚úÖ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ Telegram")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
        print("üíæ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–ø–∫–µ output/")
    
    print(f'\nüéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! Timestamp: {timestamp}')

if __name__ == "__main__":
    main() 