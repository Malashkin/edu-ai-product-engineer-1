#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram MCP - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import argparse
import json
import os
from datetime import datetime
from telegram_mcp_client import TelegramMCPClient, get_telegram_dialogs

def format_dialogs_for_analysis(dialogs):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ"""
    formatted_data = {
        "timestamp": datetime.now().isoformat(),
        "total_dialogs": len(dialogs),
        "dialogs": [],
        "summary": {
            "private_chats": 0,
            "groups": 0,
            "channels": 0,
            "total_unread": 0,
            "pinned_count": 0,
        }
    }
    
    for dialog in dialogs:
        chat_type = dialog.get('type', 'unknown')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if chat_type == 'PRIVATE':
            formatted_data["summary"]["private_chats"] += 1
        elif chat_type == 'GROUP' or chat_type == 'SUPERGROUP':
            formatted_data["summary"]["groups"] += 1
        elif chat_type == 'CHANNEL':
            formatted_data["summary"]["channels"] += 1
        
        formatted_data["summary"]["total_unread"] += dialog.get('unread_count', 0)
        
        if dialog.get('is_pinned'):
            formatted_data["summary"]["pinned_count"] += 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ
        formatted_dialog = {
            "id": dialog['id'],
            "title": dialog.get('title', dialog.get('first_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')),
            "type": chat_type,
            "username": dialog.get('username'),
            "unread_count": dialog.get('unread_count', 0),
            "is_pinned": dialog.get('is_pinned', False),
            "is_verified": dialog.get('is_verified', False),
            "last_message": None
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if dialog.get('top_message'):
            top_msg = dialog['top_message']
            formatted_dialog["last_message"] = {
                "text": top_msg.get('text'),
                "date": top_msg.get('date'),
                "from_user": top_msg.get('from_user', {}).get('first_name') if top_msg.get('from_user') else None
            }
        
        formatted_data["dialogs"].append(formatted_dialog)
    
    return formatted_data

async def get_dialogs_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    print(f"üì± –ü–æ–ª—É—á–µ–Ω–∏–µ {args.limit} –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ Telegram...")
    
    try:
        dialogs = await get_telegram_dialogs(limit=args.limit, save_to_file=False)
        
        if dialogs:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            formatted_data = format_dialogs_for_analysis(dialogs)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            if args.output:
                filename = args.output
            else:
                filename = f"output/telegram_dialogs_{timestamp}.json"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(formatted_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –î–∏–∞–ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            summary = formatted_data["summary"]
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {formatted_data['total_dialogs']}")
            print(f"  –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã: {summary['private_chats']}")
            print(f"  –ì—Ä—É–ø–ø—ã: {summary['groups']}")
            print(f"  –ö–∞–Ω–∞–ª—ã: {summary['channels']}")
            print(f"  –í—Å–µ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {summary['total_unread']}")
            print(f"  –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö: {summary['pinned_count']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –¥–∏–∞–ª–æ–≥–æ–≤
            print(f"\nüîù –¢–æ–ø-5 –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
            sorted_dialogs = sorted(formatted_data["dialogs"], 
                                  key=lambda x: x['unread_count'], 
                                  reverse=True)
            
            for i, dialog in enumerate(sorted_dialogs[:5], 1):
                title = dialog['title']
                unread = dialog['unread_count']
                chat_type = dialog['type']
                pinned = "üìå" if dialog['is_pinned'] else ""
                
                print(f"  {i}. {pinned} {title} ({chat_type}) - {unread} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö")
            
            return filename
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {str(e)}")
        return None

async def get_chat_history_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    print(f"üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {args.chat_id}...")
    
    client = TelegramMCPClient()
    
    try:
        if await client.initialize():
            messages = await client.get_chat_history(args.chat_id, limit=args.limit)
            
            if messages:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                if args.output:
                    filename = args.output
                else:
                    filename = f"output/telegram_chat_{args.chat_id}_{timestamp}.json"
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs(os.path.dirname(filename), exist_ok=True)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                chat_data = {
                    "timestamp": datetime.now().isoformat(),
                    "chat_id": args.chat_id,
                    "total_messages": len(messages),
                    "messages": messages
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(chat_data, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {filename}")
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                await client.close()
                return filename
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
                await client.close()
                return None
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}")
        if client.client:
            await client.close()
        return None

async def search_messages_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π: '{args.query}'...")
    
    client = TelegramMCPClient()
    
    try:
        if await client.initialize():
            messages = await client.search_messages(
                query=args.query, 
                chat_id=args.chat_id if hasattr(args, 'chat_id') and args.chat_id else None,
                limit=args.limit
            )
            
            if messages:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                safe_query = args.query.replace(' ', '_').replace('/', '_')[:20]
                if args.output:
                    filename = args.output
                else:
                    filename = f"output/telegram_search_{safe_query}_{timestamp}.json"
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs(os.path.dirname(filename), exist_ok=True)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                search_data = {
                    "timestamp": datetime.now().isoformat(),
                    "query": args.query,
                    "chat_id": args.chat_id if hasattr(args, 'chat_id') and args.chat_id else None,
                    "total_found": len(messages),
                    "messages": messages
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(search_data, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
                for i, msg in enumerate(messages[:3], 1):
                    text = msg.get('text', '[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]')
                    if len(text) > 80:
                        text = text[:77] + "..."
                    
                    chat_info = msg.get('chat', {})
                    chat_title = chat_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç')
                    
                    print(f"  {i}. –í —á–∞—Ç–µ '{chat_title}': {text}")
                
                await client.close()
                return filename
            else:
                print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await client.close()
                return None
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        if client.client:
            await client.close()
        return None

async def send_message_command(args):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {args.chat_id}...")
    
    client = TelegramMCPClient()
    
    try:
        if await client.initialize():
            result = await client.send_message(args.chat_id, args.text)
            
            if result.get('success'):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                if args.output:
                    filename = args.output
                else:
                    safe_chat_id = str(args.chat_id).replace('@', '').replace('-', '_')
                    filename = f"output/telegram_sent_message_{safe_chat_id}_{timestamp}.json"
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs(os.path.dirname(filename), exist_ok=True)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                message_data = {
                    "timestamp": datetime.now().isoformat(),
                    "action": "send_message",
                    "target_chat": args.chat_id,
                    "message_text": args.text,
                    "result": result
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(message_data, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                chat_info = result.get('chat_info', {})
                chat_name = chat_info.get('title') or chat_info.get('first_name') or chat_info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç')
                
                print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ:")
                print(f"  –ß–∞—Ç: {chat_name}")
                print(f"  –¢–∏–ø: {chat_info.get('type', 'Unknown')}")
                print(f"  ID —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('message_id')}")
                print(f"  –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('date', 'Unknown')}")
                print(f"  –¢–µ–∫—Å—Ç: \"{result.get('text', '')}\"")
                
                await client.close()
                return filename
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                await client.close()
                return None
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        if client.client:
            await client.close()
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(description='Telegram MCP Client - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π')
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
    dialogs_parser = subparsers.add_parser('getDialogs', help='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤')
    dialogs_parser.add_argument('--limit', type=int, default=50, 
                               help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    dialogs_parser.add_argument('--output', type=str, 
                               help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    history_parser = subparsers.add_parser('getHistory', help='–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞')
    history_parser.add_argument('chat_id', type=int, help='ID —á–∞—Ç–∞')
    history_parser.add_argument('--limit', type=int, default=100,
                               help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)')
    history_parser.add_argument('--output', type=str,
                               help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    search_parser = subparsers.add_parser('search', help='–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π')
    search_parser.add_argument('query', type=str, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    search_parser.add_argument('--chat_id', type=int, 
                              help='ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º)')
    search_parser.add_argument('--limit', type=int, default=50,
                              help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    search_parser.add_argument('--output', type=str,
                              help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_message_parser = subparsers.add_parser('sendMessage', help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç')
    send_message_parser.add_argument('chat_id', type=str, help='ID —á–∞—Ç–∞ –∏–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: egorpalich –∏–ª–∏ 131669361)')
    send_message_parser.add_argument('text', type=str, help='–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    send_message_parser.add_argument('--output', type=str,
                               help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    import asyncio
    
    if args.command == 'getDialogs':
        result = asyncio.run(get_dialogs_command(args))
    elif args.command == 'getHistory':
        result = asyncio.run(get_chat_history_command(args))
    elif args.command == 'search':
        result = asyncio.run(search_messages_command(args))
    elif args.command == 'sendMessage':
        result = asyncio.run(send_message_command(args))
    
    if result:
        print(f"\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {result}")
    else:
        print(f"\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

if __name__ == "__main__":
    main() 