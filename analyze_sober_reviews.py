import asyncio
import json
import os
from datetime import datetime
from app_reviews_scraper import AppReviewsScraper
from persona_generator import PersonaGenerator
from group_discussion import run_group_discussion
from summarizer import DiscussionSummarizer
from recommendations import Recommendations
from review_classifier import ReviewClassifier
from telegram_notifier import TelegramNotifier
from dotenv import load_dotenv
from openai import OpenAI
import glob

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Sober
APP_NAME = "Sober"
GOOGLE_PLAY_ID = "com.osu.cleanandsobertoolboxandroid"  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ Google Play
MONTHS = 12  # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - 12 –º–µ—Å—è—Ü–µ–≤ (1 –≥–æ–¥)

async def run_sober_analysis():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Sober"""
    print("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Sober...")
    
    # –¢–µ–∫—É—â–∏–π timestamp –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –®–∞–≥ 1: –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤
    print("\n1. –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Google Play...")
    scraper = AppReviewsScraper()
    reviews_data = scraper.get_app_reviews(
        app_name=APP_NAME,
        google_play_id=GOOGLE_PLAY_ID,
        months=MONTHS
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤—ã –≤ —Ñ–∞–π–ª
    reviews_file = scraper.save_reviews(reviews_data)
    reviews_path = os.path.join('output', reviews_file)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    with open(reviews_path, 'r', encoding='utf-8') as f:
        reviews_data = json.load(f)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    all_reviews = []
    for site_name, site_data in reviews_data['sites'].items():
        all_reviews.extend(site_data['reviews'])
    
    if not all_reviews:
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("\n2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    category, item_type, item_name = analyze_reviews_topic(all_reviews[:20])
    
    # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if APP_NAME.lower() not in item_name.lower():
        item_name = f"{APP_NAME} ({item_name})"
    
    print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞: {category}, {item_type}, {item_name}")
    
    # –®–∞–≥ 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
    print("\n3. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    classifier = ReviewClassifier()
    classified_reviews = classifier.process_reviews(all_reviews)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    classified_file = f"classified_reviews_{timestamp}.json"
    with open(os.path.join('output', classified_file), 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'app_name': APP_NAME,
            'category': category,
            'item_type': item_type,
            'item_name': item_name,
            'categories': classified_reviews
        }, f, ensure_ascii=False, indent=2)
    
    print(f"–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {classified_file}")

    # –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ –±–∞–≥–∞—Ö
    print("\n4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ –±–∞–≥–∞—Ö...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram notifier (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    telegram_notifier = None
    try:
        telegram_notifier = TelegramNotifier()
        print("‚úÖ Telegram notifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  Telegram notifier –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: {str(e)}")
        print("   –ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª—ã")
    
    if classified_reviews['bug_reports']['raw']:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±–∞–≥–∞ –≤ –±–∞–≥-—Ç—Ä–µ–∫–µ—Ä–µ (–∑–∞–≥–ª—É—à–∫–∞)
        for i, bug in enumerate(classified_reviews['bug_reports']['raw'], 1):
            bug_text = bug['text'] if isinstance(bug, dict) and 'text' in bug else str(bug)
            check_result = check_similar_bug_in_tracker(bug_text)
            print(f"   {i}. {check_result}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
            timestamp_bug = datetime.now().strftime("%Y%m%d_%H%M%S")
            bug_report = generate_bug_report_via_openai(bug_text, i, timestamp_bug)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
            bugreport_file = os.path.join('output', f'bugreport_{i}_{timestamp_bug}.md')
            with open(bugreport_file, 'w', encoding='utf-8') as f:
                f.write(bug_report)
            print(f"   –ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {bugreport_file}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –≤ Telegram
            if telegram_notifier:
                try:
                    response = telegram_notifier.send_bug_report(bug_report, i)
                    if response and response.get('ok'):
                        print(f"   üì§ –ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç #{i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞ #{i} –≤ Telegram")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–∫—É—Å—Å–∏—é –æ –±–∞–≥–∞—Ö
        bug_personas = create_personas(
            classified_reviews['bug_reports']['raw'], 
            'bug_reports', 
            timestamp, 
            category
        )
        bug_discussion_file, bug_summary_file = run_category_discussion(
            bug_personas, 
            f"{item_name} (–æ—Ç—á–µ—Ç—ã –æ –±–∞–≥–∞—Ö)", 
            item_type,
            summary_type='bug_reports'
        )
        print(f"–û–±—Å—É–∂–¥–µ–Ω–∏–µ –±–∞–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {bug_discussion_file}")
        print(f"–†–µ–∑—é–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±–∞–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {bug_summary_file}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ –±–∞–≥–∞—Ö –≤ Telegram
        if telegram_notifier and bug_summary_file:
            try:
                with open(os.path.join('output', bug_summary_file), 'r', encoding='utf-8') as f:
                    summary_content = f.read()
                response = telegram_notifier.send_summary_report(summary_content, "bugs")
                if response and response.get('ok'):
                    print(f"   üì§ –†–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ –±–∞–≥–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –≤ Telegram")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—é–º–µ –≤ Telegram: {str(e)}")
    else:
        print("–û—Ç—á–µ—Ç—ã –æ –±–∞–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        bug_discussion_file = None
        bug_summary_file = None

    # –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    print("\n5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    if classified_reviews['feature_requests']['raw']:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        improvements_from_features = []
        for i, feature in enumerate(classified_reviews['feature_requests']['raw'], 1):
            feature_text = feature['text'] if isinstance(feature, dict) and 'text' in feature else str(feature)
            improvements_from_features.append({
                "category": "feature_improvements",
                "title": f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é #{i}",
                "description": feature_text,
                "priority": "medium"
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if improvements_from_features:
            print("   –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...")
            unique_improvements = find_duplicate_improvements(improvements_from_features)
            print(f"   –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Å—Ç–∞–ª–æ—Å—å {len(unique_improvements)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
            print("   –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏...")
            timestamp_imp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ JSON-—Ñ–∞–π–ª
            unique_improvements_file = os.path.join('output', f'unique_improvements_{timestamp_imp}.json')
            with open(unique_improvements_file, 'w', encoding='utf-8') as f:
                json.dump(unique_improvements, f, ensure_ascii=False, indent=2)
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {unique_improvements_file}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
            for i, imp in enumerate(unique_improvements, 1):
                print(f"   –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è {i} –∏–∑ {len(unique_improvements)}...")
                proposal = generate_improvement_proposal(imp)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
                imp_title = imp.get('title', f'improvement_{i}').replace(' ', '_').lower()[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                proposal_file = os.path.join('output', f'improvement_proposal_{imp_title}_{timestamp_imp}.md')
                with open(proposal_file, 'w', encoding='utf-8') as f:
                    f.write(proposal)
                print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {proposal_file}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω –∏ –¥–∏—Å–∫—É—Å—Å–∏–µ–π
        feature_personas = create_personas(
            classified_reviews['feature_requests']['raw'], 
            'feature_requests', 
            timestamp, 
            category
        )
        feature_discussion_file, feature_summary_file = run_category_discussion(
            feature_personas, 
            f"{item_name} (–∑–∞–ø—Ä–æ—Å—ã —Ñ—É–Ω–∫—Ü–∏–π)", 
            item_type,
            summary_type='feature_requests'
        )
        print(f"–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {feature_discussion_file}")
        print(f"–†–µ–∑—é–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {feature_summary_file}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ Telegram
        if telegram_notifier and feature_summary_file:
            try:
                with open(os.path.join('output', feature_summary_file), 'r', encoding='utf-8') as f:
                    summary_content = f.read()
                response = telegram_notifier.send_summary_report(summary_content, "features")
                if response and response.get('ok'):
                    print(f"   üì§ –†–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ Telegram")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—é–º–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ Telegram: {str(e)}")
    else:
        print("–ó–∞–ø—Ä–æ—Å—ã –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        feature_discussion_file = None
        feature_summary_file = None

    # –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\n6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    recommendations_file = generate_recommendations(
        classified_reviews, bug_discussion_file, feature_discussion_file, bug_summary_file, feature_summary_file
    )
    
    print("\n–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"1. –û—Ç–∑—ã–≤—ã: output/{reviews_file}")
    print(f"2. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: output/{classified_file}")
    
    if bug_discussion_file:
        print(f"3. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –±–∞–≥–æ–≤: output/{bug_discussion_file}")
    
    if feature_discussion_file:
        print(f"4. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π: output/{feature_discussion_file}")
    
    if recommendations_file:
        print(f"5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: output/{recommendations_file}")

def analyze_reviews_topic(reviews):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –æ—Ç–∑—ã–≤–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    
    Args:
        reviews: –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        tuple: (category, item_type, item_name)
    """
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ –≤—Å–µ, —á—Ç–æ–±—ã —ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç–æ–∫–µ–Ω—ã)
    sample_reviews = reviews[:15]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    review_texts = []
    for review in sample_reviews:
        if isinstance(review, dict) and 'text' in review:
            review_texts.append(review['text'])
        elif isinstance(review, str):
            review_texts.append(review)
    
    review_text = "\n\n".join(review_texts)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(review_text) > 3000:
        review_text = review_text[:3000] + "..."
    
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
    1. –ö–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: health, lifestyle, productivity, social, –∏ —Ç.–¥.)
    2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: fitness tracker, meditation app, habit tracker –∏ —Ç.–¥.)
    3. –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤
    
    –û—Ç–∑—ã–≤—ã:
    {review_text}
    
    –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
    {{"category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "type": "—Ç–∏–ø_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "name": "–∫—Ä–∞—Ç–∫–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ_–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"}}
    """
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        client = OpenAI(
            api_key=os.getenv("OPENAI_API_KEY"),
            base_url="https://api.openai.com/v1"
        )
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ JSON
        result_text = response.choices[0].message.content.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç)
        import re
        json_pattern = r'\{.*\}'
        json_match = re.search(json_pattern, result_text, re.DOTALL)
        
        if json_match:
            json_str = json_match.group(0)
            result = json.loads(json_str)
        else:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            try:
                result = json.loads(result_text)
            except:
                # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                result = {"category": "app", "type": "health", "name": "Sober App"}
        
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤: –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{result['category']}', —Ç–∏–ø '{result['type']}', –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ '{result['name']}'")
        return (result['category'], result['type'], result['name'])
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return ("app", "health", "Sober App")

def create_personas(reviews, category_name, timestamp, app_category="app"):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Args:
        reviews: –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
        timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        app_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω
    """
    print(f"\n–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'...")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω
    persona_gen = PersonaGenerator()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω
    mid = len(reviews) // 2
    reviews_part1 = reviews[:mid]
    reviews_part2 = reviews[mid:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    max_reviews_per_part = 100
    if len(reviews_part1) > max_reviews_per_part:
        print(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ ({len(reviews_part1)}), –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {max_reviews_per_part}")
        reviews_part1 = reviews_part1[:max_reviews_per_part]
    
    if len(reviews_part2) > max_reviews_per_part:
        print(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ ({len(reviews_part2)}), –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {max_reviews_per_part}")
        reviews_part2 = reviews_part2[:max_reviews_per_part]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    personas = []
    
    for part, part_reviews in enumerate([reviews_part1, reviews_part2], 1):
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {part}...")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤
        max_text_length = 10000
        all_text = ""
        for review in part_reviews:
            if isinstance(review, dict) and 'text' in review:
                all_text += review['text'] + " "
        if len(all_text) > max_text_length:
            print(f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(all_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {max_text_length}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤
        persona = persona_gen.generate_persona(part_reviews, category=app_category)
        if persona:
            personas.append({
                'category': category_name,
                'part': part,
                'based_on_reviews': len(part_reviews),
                'persona': persona
            })
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}, —á–∞—Å—Ç—å {part}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω—ã –≤ —Ñ–∞–π–ª
    personas_file = f"personas_{category_name}_{timestamp}.json"
    with open(os.path.join('output', personas_file), 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'category': category_name,
            'total_personas': len(personas),
            'personas': personas
        }, f, ensure_ascii=False, indent=4)
    
    print(f"–ü–µ—Ä—Å–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {personas_file}")
    return personas

def run_category_discussion(personas, discussion_topic, item_type, summary_type=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤—É—é –¥–∏—Å–∫—É—Å—Å–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    Args:
        personas: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω
        discussion_topic: –¢–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        item_type: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞
        summary_type: –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Ä–µ–∑—é–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'bug_reports' –∏–ª–∏ 'feature_requests')
    Returns:
        tuple: (–∏–º—è —Ñ–∞–π–ª–∞ –¥–∏—Å–∫—É—Å—Å–∏–∏, –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ)
    """
    print(f"\n–ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–π –¥–∏—Å–∫—É—Å—Å–∏–∏ –ø–æ —Ç–µ–º–µ '{discussion_topic}'...")
    personas_for_discussion = [persona_data['persona'] for persona_data in personas]
    discussion_file = run_group_discussion(
        item_type=item_type,
        item_name=discussion_topic,
        custom_personas=personas_for_discussion
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑—é–º–µ
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    if summary_type:
        summary_file = f"discussion_summary_{summary_type}_{timestamp}.txt"
    else:
        summary_file = f"discussion_summary_{timestamp}.txt"
    summarizer = DiscussionSummarizer()
    summary_file_actual = summarizer.summarize_discussion(file_path=discussion_file, output_file_name=summary_file)
    return discussion_file, summary_file_actual

def generate_recommendations(classified_reviews, bug_discussion_file, feature_discussion_file, bug_summary_file=None, feature_summary_file=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    Args:
        classified_reviews: –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        bug_discussion_file: –§–∞–π–ª —Å –¥–∏—Å–∫—É—Å—Å–∏–µ–π –ø–æ –±–∞–≥–∞–º
        feature_discussion_file: –§–∞–π–ª —Å –¥–∏—Å–∫—É—Å—Å–∏–µ–π –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
        bug_summary_file: –§–∞–π–ª —Å —Ä–µ–∑—é–º–µ –±–∞–≥-–¥–∏—Å–∫—É—Å—Å–∏–∏
        feature_summary_file: –§–∞–π–ª —Å —Ä–µ–∑—é–º–µ —Ñ–∏—á-–¥–∏—Å–∫—É—Å—Å–∏–∏
    Returns:
        str: –ò–º—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    recommendations_file = f"recommendations_{timestamp}.json"
    analysis_data = {
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'bug_reports': {
            'count': len(classified_reviews['bug_reports']['raw']),
            'summarized': classified_reviews['bug_reports']['summarized']
        },
        'feature_requests': {
            'count': len(classified_reviews['feature_requests']['raw']),
            'summarized': classified_reviews['feature_requests']['summarized']
        },
        'appreciation': {
            'count': len(classified_reviews['appreciation']['raw'])
        }
    }
    if bug_summary_file:
        try:
            with open(os.path.join('output', bug_summary_file), 'r', encoding='utf-8') as f:
                bug_summary = f.read()
            analysis_data['bug_discussion_summary'] = bug_summary
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ –±–∞–≥–∞—Ö: {str(e)}")
    if feature_summary_file:
        try:
            with open(os.path.join('output', feature_summary_file), 'r', encoding='utf-8') as f:
                feature_summary = f.read()
            analysis_data['feature_discussion_summary'] = feature_summary
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö: {str(e)}")
    try:
        analyzer = Recommendations()
        result_file = analyzer.analyze_from_classified_data(analysis_data)
        if result_file:
            print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {result_file}")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        return result_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
        return None

def check_similar_bug_in_tracker(bug_text):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ—Ö–æ–∂–µ–≥–æ –±–∞–≥–∞ –≤ –±–∞–≥-—Ç—Ä–µ–∫–µ—Ä–µ (Jira, GitHub –∏ —Ç.–¥.)"""
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–≥–∞ –≤ –±–∞–≥-—Ç—Ä–µ–∫–µ—Ä–µ: {bug_text[:60]}...")
    return "–ü–æ—Ö–æ–∂–∏–π –±–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

def generate_bug_report_via_openai(bug_text, bug_index=None, timestamp=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –ø–æ —à–∞–±–ª–æ–Ω—É —á–µ—Ä–µ–∑ OpenAI API"""
    import openai
    from dotenv import load_dotenv
    load_dotenv()
    openai.api_key = os.getenv("OPENAI_API_KEY")
    prompt = f"""–†–∞–∑–ª–æ–∂–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–∞–≥ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞:

1. –ó–∞–≥–æ–ª–æ–≤–æ–∫
2. –û–ø–∏—Å–∞–Ω–∏–µ
3. –®–∞–≥–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
4. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
5. –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
6. –û–∫—Ä—É–∂–µ–Ω–∏–µ
7. –í–ª–æ–∂–µ–Ω–∏—è
8. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ

–¢–µ–∫—Å—Ç –±–∞–≥–∞:
{bug_text}
"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –ü–û. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=800,
        )
        report = response.choices[0].message.content.strip()
    except Exception as e:
        report = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞: {str(e)}\n\n–¢–µ–∫—Å—Ç –±–∞–≥–∞:\n{bug_text}"
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
    if not timestamp:
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    idx = bug_index if bug_index is not None else 'X'
    filename = f"bugreport_{idx}_{timestamp}.md"
    with open(os.path.join('output', filename), 'w', encoding='utf-8') as f:
        f.write(report)
    print(f"–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}")
    return filename

def find_duplicate_improvements(improvements):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã/–ø–æ—Ö–æ–∂–∏–µ –∏–¥–µ–∏ —á–µ—Ä–µ–∑ OpenAI
    
    Args:
        improvements: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—è–º —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    """
    import openai
    from dotenv import load_dotenv
    load_dotenv()
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    improvements_text = ""
    for i, imp in enumerate(improvements, 1):
        imp_title = imp.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        imp_desc = imp.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
        imp_category = imp.get('category', 'unknown')
        improvements_text += f"–£–ª—É—á—à–µ–Ω–∏–µ {i} ({imp_category}): {imp_title}\n{imp_desc}\n\n"
    
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞–π–¥–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –∏–¥–µ–∏.
    –û–±—ä–µ–¥–∏–Ω–∏ –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —É—Ç–æ—á–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π.

    –î–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏ —É–∫–∞–∂–∏:
    1. –ö–∞—Ç–µ–≥–æ—Ä–∏—é (feature_improvements, ux_improvements, stability_improvements –∏ —Ç.–¥.)
    2. –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è)
    3. –û–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ)
    4. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high, medium, low)

    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:
    {improvements_text}

    –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    [
      {{
        "category": "feature_improvements",
        "title": "–ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞",
        "description": "–ü—Ä–∏–º–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è",
        "priority": "high"
      }},
      ...
    ]
    """
    
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º—É –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=1500,
        )
        
        result = response.choices[0].message.content.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        import re
        import json
        
        json_pattern = r'\[.*\]'
        json_match = re.search(json_pattern, result, re.DOTALL)
        
        if json_match:
            json_str = json_match.group(0)
            unique_improvements = json.loads(json_str)
        else:
            try:
                unique_improvements = json.loads(result)
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π.")
                unique_improvements = improvements
                
        return unique_improvements
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É–ª—É—á—à–µ–Ω–∏–π: {str(e)}")
        return improvements

def generate_improvement_proposal(improvement):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
    
    Args:
        improvement: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–ª—É—á—à–µ–Ω–∏–∏
        
    Returns:
        str: –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    """
    import openai
    from dotenv import load_dotenv
    load_dotenv()
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏–∏
    imp_title = improvement.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    imp_desc = improvement.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
    imp_category = improvement.get('category', 'unknown')
    imp_priority = improvement.get('priority', 'medium')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    template = """–®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é (Product Improvement Proposal)
1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ö—Ä–∞—Ç–∫–æ–µ, —ë–º–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è/—Ñ–∏—á–∏.

2. –ö–∞—Ç–µ–≥–æ—Ä–∏—è
(–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ: Feature, UX Improvement, Stability, Performance, Bug Fix)

3. –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
–í —á—ë–º —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã/–Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?

4. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ
–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å?

5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç (User Impact)
–ö–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?

6. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
–ö–∞–∫–æ–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è?

7. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
(High/Medium/Low) - –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.

8. –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
(–û—Ü–µ–Ω–∫–∞: Low/Medium/High, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞)

9. –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
–¶–∏—Ç–∞—Ç—ã –∏–ª–∏ –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—É.

10. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
–°–∫—Ä–∏–Ω—à–æ—Ç—ã, —Å—Å—ã–ª–∫–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å."""
    
    prompt = f"""–ó–∞–ø–æ–ª–Ω–∏ —à–∞–±–ª–æ–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

–ù–∞–∑–≤–∞–Ω–∏–µ: {imp_title}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {imp_category}
–û–ø–∏—Å–∞–Ω–∏–µ: {imp_desc}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {imp_priority}

–í–æ—Ç —à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å:

{template}

–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –î–æ–±–∞–≤—å –ª–æ–≥–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."""
    
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
            max_tokens=1200,
        )
        
        proposal = response.choices[0].message.content.strip()
        return proposal
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}\n\n–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{imp_title}\n{imp_desc}"

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("–û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        asyncio.run(run_sober_analysis()) 