import os
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —á–µ—Ä–µ–∑ Bot API"""
    
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID") 
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.chat_id:
            raise ValueError("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def send_message(self, text, parse_mode="Markdown"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode (str): –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown –∏–ª–∏ HTML)
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç Telegram API
        """
        url = f"{self.base_url}/sendMessage"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        payload = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        
        try:
            response = requests.post(url, json=payload, timeout=30)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            return None
    
    def send_bug_report(self, bug_report_content, bug_index=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –≤ Telegram —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            bug_report_content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞
            bug_index (int): –ù–æ–º–µ—Ä –±–∞–≥–∞
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç Telegram API
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        bug_num = f"#{bug_index}" if bug_index else ""
        
        header = f"üêõ *–ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç {bug_num}*\n"
        header += f"üìÖ {timestamp}\n"
        header += "‚îÄ" * 30 + "\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è Markdown
        formatted_content = self._format_bug_report_for_telegram(bug_report_content)
        
        message = header + formatted_content
        
        return self.send_message(message)
    
    def send_file(self, file_path, caption=""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ Telegram
        
        Args:
            file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            caption (str): –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç Telegram API
        """
        url = f"{self.base_url}/sendDocument"
        
        try:
            with open(file_path, 'rb') as file:
                files = {'document': file}
                data = {
                    'chat_id': self.chat_id,
                    'caption': caption
                }
                
                response = requests.post(url, files=files, data=data, timeout=60)
                response.raise_for_status()
                return response.json()
        except (requests.exceptions.RequestException, FileNotFoundError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram: {str(e)}")
            return None
    
    def _format_bug_report_for_telegram(self, content):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
        lines = content.split('\n')
        formatted_lines = []
        
        for line in lines:
            line = line.strip()
            if not line:
                formatted_lines.append("")
                continue
                
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏
            if any(keyword in line.lower() for keyword in ['–∑–∞–≥–æ–ª–æ–≤–æ–∫', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—à–∞–≥–∏', '–æ–∂–∏–¥–∞–µ–º—ã–π', '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π', '–æ–∫—Ä—É–∂–µ–Ω–∏–µ']):
                formatted_lines.append(f"*{line}*")
            # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            elif line.startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):
                formatted_lines.append(f"‚Ä¢ {line}")
            else:
                formatted_lines.append(line)
        
        return '\n'.join(formatted_lines)
    
    def send_summary_report(self, summary_content, report_type="summary"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –≤ Telegram
        
        Args:
            summary_content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—é–º–µ
            report_type (str): –¢–∏–ø –æ—Ç—á–µ—Ç–∞ (summary, bugs, features)
            
        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç Telegram API
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞
        icons = {
            "bugs": "üêõ",
            "features": "‚ú®", 
            "summary": "üìä"
        }
        
        titles = {
            "bugs": "–†–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ –±–∞–≥–∞—Ö",
            "features": "–†–µ–∑—é–º–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö",
            "summary": "–†–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞"
        }
        
        icon = icons.get(report_type, "üìã")
        title = titles.get(report_type, "–û—Ç—á–µ—Ç")
        
        header = f"{icon} *{title}*\n"
        header += f"üìÖ {timestamp}\n"
        header += "‚îÄ" * 30 + "\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ä–µ–∑—é–º–µ
        if len(summary_content) > 3000:
            summary_content = summary_content[:2900] + "\n\n... (–æ—Ç—á–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        message = header + summary_content
        
        return self.send_message(message)

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    try:
        notifier = TelegramNotifier()
        response = notifier.send_message("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API")
        if response and response.get('ok'):
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram: {str(e)}")
        return False

if __name__ == "__main__":
    test_telegram_connection() 