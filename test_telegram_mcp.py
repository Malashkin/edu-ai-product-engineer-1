#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram MCP Client
"""

import os
import asyncio
from telegram_mcp_client import TelegramMCPClient, get_telegram_dialogs

async def test_basic_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    print("\nüîó –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    
    client = TelegramMCPClient()
    
    try:
        success = await client.initialize()
        if success:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            await client.close()
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False

async def test_get_dialogs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤"""
    print("\nüì± –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤...")
    
    try:
        dialogs = await get_telegram_dialogs(limit=10, save_to_file=True)
        
        if dialogs:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 3 –¥–∏–∞–ª–æ–≥–∞—Ö
            for i, dialog in enumerate(dialogs[:3], 1):
                title = dialog.get('title', dialog.get('first_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                chat_type = dialog.get('type', 'Unknown')
                unread = dialog.get('unread_count', 0)
                
                print(f"  {i}. {title} (—Ç–∏–ø: {chat_type}, –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread})")
            
            return True
        else:
            print("‚ùå –î–∏–∞–ª–æ–≥–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {str(e)}")
        return False

async def test_get_chat_history():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    print("\nüí¨ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...")
    
    client = TelegramMCPClient()
    
    try:
        if await client.initialize():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
            dialogs = await client.get_dialogs(limit=5)
            
            if dialogs:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥
                first_dialog = dialogs[0]
                chat_id = first_dialog['id']
                chat_title = first_dialog.get('title', first_dialog.get('first_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                
                print(f"  –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è: {chat_title}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                messages = await client.get_chat_history(chat_id, limit=5)
                
                if messages:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                    for i, msg in enumerate(messages[:2], 1):
                        text = msg.get('text', '[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]')
                        date = msg.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        from_user = msg.get('from_user', {})
                        sender = from_user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        if len(text) > 50:
                            text = text[:47] + "..."
                        
                        print(f"    {i}. {sender}: {text} ({date[:19] if date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else date})")
                    
                    await client.close()
                    return True
                else:
                    print("‚ùå –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
                    await client.close()
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∞")
                await client.close()
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}")
        if client.client:
            await client.close()
        return False

async def test_search_messages():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    client = TelegramMCPClient()
    
    try:
        if await client.initialize():
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            search_queries = ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "—Å–ø–∞—Å–∏–±–æ"]
            
            for query in search_queries:
                print(f"  –ò—â–µ–º: '{query}'")
                
                messages = await client.search_messages(query, limit=3)
                
                if messages:
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    break
                else:
                    print(f"    ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            await client.close()
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ–∏—Å–∫–∞: {str(e)}")
        if client.client:
            await client.close()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram MCP Client")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_id = os.getenv("TELEGRAM_API_ID", "27734869")
    api_hash = os.getenv("TELEGRAM_API_HASH", "a6868f9bf0a8767f63cac86d954e95b7")
    
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  API ID: {api_id}")
    print(f"  API Hash: {api_hash[:10]}...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_results = []
    
    test_results.append(await test_basic_connection())
    
    if test_results[-1]:  # –ï—Å–ª–∏ –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        test_results.append(await test_get_dialogs())
        test_results.append(await test_get_chat_history())
        test_results.append(await test_search_messages())
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    test_names = [
        "–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤", 
        "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞",
        "–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"
    ]
    
    for i, (name, result) in enumerate(zip(test_names, test_results)):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"  {i+1}. {name}: {status}")
    
    passed = sum(test_results)
    total = len(test_results)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    elif passed > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

def run_simple_dialog_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ Telegram...")
    
    try:
        from telegram_mcp_client import run_get_dialogs
        dialogs = run_get_dialogs(limit=15)
        
        if dialogs:
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
            print("\nüîù –¢–æ–ø-5 –¥–∏–∞–ª–æ–≥–æ–≤:")
            
            for i, dialog in enumerate(dialogs[:5], 1):
                title = dialog.get('title', dialog.get('first_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                chat_type = dialog.get('type', 'Unknown')
                unread = dialog.get('unread_count', 0)
                is_pinned = "üìå" if dialog.get('is_pinned') else ""
                
                print(f"  {i}. {is_pinned} {title}")
                print(f"     –¢–∏–ø: {chat_type} | –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if dialog.get('top_message') and dialog['top_message'].get('text'):
                    last_text = dialog['top_message']['text']
                    if len(last_text) > 60:
                        last_text = last_text[:57] + "..."
                    print(f"     –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_text}")
                print()
                
            return True
        else:
            print("‚ùå –î–∏–∞–ª–æ–≥–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--simple":
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        run_simple_dialog_test()
    else:
        # –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã
        asyncio.run(main()) 